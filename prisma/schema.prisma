// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMINISTRATOR
  MANAGER
  EMPLOYEE
  COLLABORATOR
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  role          UserRole  @default(EMPLOYEE)
  emailVerified DateTime?
  image         String?
  
  // Contact Information
  phone         String?   // Office phone number
  mobile        String?   // Mobile phone number
  extension     String?   // Phone extension
  
  // Address Information
  address       String?   // Street address
  city          String?   // City
  zip           String?   // ZIP/Postal code
  country       String?   // Country
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  userDepartments UserDepartment[]
  
  // Department management relationships
  managedDepartments Department[] @relation("DepartmentManager")
  
  // Sharing relationships
  sharedItems SharedItem[] @relation("SharedByUser")
  sharedWithMe SharedItem[] @relation("SharedWithUser")
  sharedFolders UserSharedFolder[]
  
  // GDPR compliance tracking
  sharingAttempts SharingAttempt[]
  gdprReports GdprReport[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Department {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  email       String?   // Department email
  managerId   String?   // ID of the department manager
  parentId    String?   // ID of the parent department (for hierarchical structure)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Self-referencing relationship for parent/child departments
  parent   Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children Department[] @relation("DepartmentHierarchy")
  
  // Department manager relationship
  manager User? @relation("DepartmentManager", fields: [managerId], references: [id])
  
  // Users in this department
  userDepartments UserDepartment[]
  
  // Available roles in this department
  departmentRoles DepartmentRole[]

  @@map("departments")
}

model UserDepartment {
  id           String     @id @default(cuid())
  userId       String
  departmentId String
  jobPosition  String     // Job position/role within the department
  isManager    Boolean    @default(false) // Whether this user is a manager in this department
  joinedAt     DateTime   @default(now())
  leftAt       DateTime?  // When the user left the department (null = still active)

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@unique([userId, departmentId, jobPosition]) // User can have multiple positions in same department
  @@map("user_departments")
}

model DepartmentRole {
  id          String   @id @default(cuid())
  name        String   // e.g., "Software Engineer", "Marketing Specialist", "Team Lead"
  description String?  // Description of the role
  departmentId String  // Which department this role belongs to
  level       Int      @default(1) // Seniority level (1 = Junior, 2 = Mid, 3 = Senior, 4 = Lead, 5 = Manager)
  isActive    Boolean  @default(true) // Whether this role is currently active
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)

  @@unique([departmentId, name]) // Role names must be unique within a department
  @@map("department_roles")
}

model Company {
  id         Int       @id @default(autoincrement())
  sodtype    Int       // 12 = supplier, 13 = customer
  trdr       Int?      @unique // SoftOne TRDR (unique per trader)
  code       String    @db.VarChar(64)
  name       String    @db.VarChar(255)
  afm        String    @db.VarChar(20)     // Greek VAT number
  country    String?   @db.VarChar(10)     // Country code or name
  address    String?   @db.VarChar(255)
  zip        String?   @db.VarChar(10)
  city       String?   @db.VarChar(100)
  phone01    String?   @db.VarChar(30)
  phone02    String?   @db.VarChar(30)
  fax        String?   @db.VarChar(30)
  jobtypetrd Int?
  webpage    String?   @db.VarChar(255)
  email      String?   @db.VarChar(255)
  emailacc   String?   @db.VarChar(255)
  irsdata    Json?                         // free-form ERP payload
  sotitle    String?   @db.VarChar(100)
  concent    Boolean?  @default(false)     // kept original field name
  upddate    DateTime  @updatedAt @db.Timestamp(0)

  // relations
  contactCompanies ContactCompany[]

  @@map("companies")
  @@index([sodtype])
  @@index([afm])
  @@index([code])
  @@index([name])
}

/// CONTACTS
model Contact {
  id          Int               @id @default(autoincrement())
  name        String            @db.VarChar(255)
  title       String?           @db.VarChar(100)
  description String?           @db.Text
  phone       String?           @db.VarChar(30)
  mobile      String?           @db.VarChar(30)
  workPhone   String?           @db.VarChar(30)
  email       String?           @db.VarChar(255)
  address     String?           @db.VarChar(255)
  city        String?           @db.VarChar(100)
  zip         String?           @db.VarChar(10)
  country     String?           @db.VarChar(2)

  // relations
  companies   ContactCompany[]
  sharedItems SharedItem[]

  @@map("contacts")
  @@index([name])
  @@index([email])
}

/// JUNCTION: CONTACTS â†” COMPANIES
model ContactCompany {
  // composite PK
  contactId   Int
  companyId   Int

  // extra fields on the association
  position    String?  @db.VarChar(100)
  description String?  @db.Text

  // relations
  contact     Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@id([contactId, companyId])
  @@map("contactCompanies")
  @@index([companyId])
  @@index([contactId])
}

/// FILE AND FOLDER SHARING
model SharedItem {
  id          String      @id @default(cuid())
  itemPath    String      // Full path to the file or folder
  itemName    String      // Name of the file or folder
  itemType    String      // 'file' or 'folder'
  sharedBy    String      // ID of the user who shared the item
  sharedAt    DateTime    @default(now())
  expiresAt   DateTime?   // Optional expiration date
  isActive    Boolean     @default(true)
  
  // Sharing type: 'user' for user sharing, 'contact' for contact sharing
  sharingType String      // 'user' or 'contact'
  
  // For user sharing
  sharedWithUserId String? // ID of the user the item is shared with
  
  // For contact sharing
  sharedWithContactId Int?  // ID of the contact the item is shared with
  shareLink          String? // Unique sharing link for contacts
  shareLinkExpiresAt DateTime? // When the share link expires
  
  // Relations
  sharedByUser       User        @relation("SharedByUser", fields: [sharedBy], references: [id], onDelete: Cascade)
  sharedWithUser     User?       @relation("SharedWithUser", fields: [sharedWithUserId], references: [id], onDelete: Cascade)
  sharedWithContact  Contact?    @relation(fields: [sharedWithContactId], references: [id], onDelete: Cascade)
  
  // Permissions
  canView    Boolean @default(true)
  canDownload Boolean @default(true)
  canEdit    Boolean @default(false)
  canDelete  Boolean @default(false)
  
  // Metadata
  description String? // Optional description of what's being shared
  
  @@map("shared_items")
  @@index([itemPath])
  @@index([sharedBy])
  @@index([sharedWithUserId])
  @@index([sharedWithContactId])
  @@index([shareLink])
  @@index([isActive])
}

/// USER SHARED FOLDERS
model UserSharedFolder {
  id          String   @id @default(cuid())
  userId      String   // ID of the user who owns this shared folder
  folderPath  String   // Path to the shared folder
  folderName  String   // Name of the shared folder
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, folderPath])
  @@map("user_shared_folders")
  @@index([userId])
  @@index([folderPath])
}

/// GDPR COMPLIANCE AND FILE SCANNING
model FileScanResult {
  id          String   @id @default(cuid())
  filePath    String   // Full path to the scanned file
  fileName    String   // Name of the file
  scanDate    DateTime @default(now())
  scanStatus  String   // 'pending', 'scanning', 'completed', 'failed'
  
  // GDPR Detection Results
  hasPersonalData Boolean @default(false)
  personalDataTypes String @db.Text // JSON string of detected personal data types
  riskLevel       String   // 'low', 'medium', 'high', 'critical'
  
  // File Analysis
  fileType       String?  // Detected file type
  fileSize       Int?     // File size in bytes
  contentHash    String?  // Hash of file content for change detection
  
  // Scan Details
  scanDuration   Int?     // Scan duration in milliseconds
  scanErrors     String?  // Any errors during scanning
  scanVersion   String    // Version of scanning algorithm used
  
  // Relations
  sharingAttempts SharingAttempt[]
  
  @@map("file_scan_results")
  @@index([filePath])
  @@index([scanDate])
  @@index([hasPersonalData])
  @@index([riskLevel])
}

/// SHARING ATTEMPTS TRACKING
model SharingAttempt {
  id          String   @id @default(cuid())
  userId      String   // ID of the user attempting to share
  itemPath    String   // Path to the item being shared
  itemName    String   // Name of the item
  itemType    String   // 'file' or 'folder'
  attemptDate DateTime @default(now())
  
  // Sharing Details
  sharingType String   // 'user' or 'contact'
  targetId    String   // ID of target user or contact
  targetType  String   // 'user' or 'contact'
  
  // GDPR Compliance
  gdprCompliant Boolean @default(false)
  blockedReason String? // Reason if sharing was blocked
  
  // File Scan Results
  fileScanResultId String? // Link to file scan result
  scanRequired    Boolean @default(false)
  scanCompleted   Boolean @default(false)
  
  // User Actions
  userAcknowledged Boolean @default(false) // User acknowledged GDPR warning
  userJustification String? // User's reason for sharing despite warnings
  
  // Audit Trail
  ipAddress    String? // User's IP address
  userAgent    String? // User's browser/device info
  sessionId    String? // User's session ID
  
  // Relations
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  fileScanResult FileScanResult? @relation(fields: [fileScanResultId], references: [id])
  
  @@map("sharing_attempts")
  @@index([userId])
  @@index([attemptDate])
  @@index([gdprCompliant])
  @@index([itemPath])
}

/// GDPR PERSONAL DATA PATTERNS
model GdprPattern {
  id          String   @id @default(cuid())
  name        String   // Pattern name (e.g., "Email Address", "Phone Number")
  description String   // Description of what this pattern detects
  pattern     String   // Regex pattern for detection
  riskLevel   String   // 'low', 'medium', 'high', 'critical'
  category    String   // 'contact', 'financial', 'health', 'identification', 'other'
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("gdpr_patterns")
  @@index([category])
  @@index([riskLevel])
  @@index([isActive])
}

/// GDPR COMPLIANCE REPORTS
model GdprReport {
  id          String   @id @default(cuid())
  reportType  String   // 'daily', 'weekly', 'monthly', 'custom'
  startDate   DateTime
  endDate     DateTime
  generatedAt DateTime @default(now())
  generatedBy String   // User ID who generated the report
  
  // Report Content (stored as JSON)
  reportData  Json     // Detailed report data
  
  // Report Status
  status      String   // 'generating', 'completed', 'failed'
  filePath    String?  // Path to generated report file
  
  // Relations
  user        User     @relation(fields: [generatedBy], references: [id], onDelete: Cascade)
  
  @@map("gdpr_reports")
  @@index([reportType])
  @@index([startDate])
  @@index([endDate])
  @@index([generatedBy])
}
